1.	 Write a program in Haskell using “Guards, Pattern matching” and taking natural number from the user and generating a sequence where: If the current term is even, the next term is the square of the current term. If the current term is odd, the next term is the cube of the current term.The sequence stops when the term exceeds a certain limit (e.g., 1000).Example:(exponentiationSequence 2) returns Output: 2, 4, 16, 256 (stops at 1000).

2. Write a recursive haskell program longestConsecutive that takes a list of integers and returns the longest sublist of consecutive integers in the list. The elements of the sublist must be in increasing order. Example: longestConsecutive [1, 3, 5, 4, 2, 6] -- Output: [1, 2, 3, 4, 5, 6] longestConsecutive [1, 2, 1, 2, 3] -- Output: [1, 2, 3]

3.Write a program in Haskell using “Guards, Pattern matching” and taking natural number from the user  and generates a sequence where: If the current term is divisible by 3, the next term is the square root of the current term (integer part only). If the current term is not divisible by 3, the next term is the current term multiplied by 2. The sequence stops when the term becomes less than or equal to 1.(transformationSequence 18) returns Output: [18, 4, 8, 16, 32] (stops when the term is ≤ 1).

4.Write a recursive Haskell program longestConsecutiveDescending that takes a list of integers and returns the longest sublist of consecutive integers in descending order. The elements of the sublist must decrease by 1 at each step. [10] [CO3-BTL3-DL2]

Example: longestConsecutiveDescending([6, 4, 5, 3, 2, 1]) → Output: [6, 5, 4, 3, 2, 1], 
 longestConsecutiveDescending([5, 4, 6, 7, 3]) → Output: [5, 4, 3]
